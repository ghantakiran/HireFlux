name: Deploy to Staging

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend'
        required: false
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-frontend:
    name: Build & Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_frontend == 'true'

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL || 'https://api-staging.hireflux.com' }}
          NODE_ENV: production

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--env NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}'
          alias-domains: staging.hireflux.com

      - name: Comment deployment URL
        if: github.event_name == 'push'
        run: |
          echo "üöÄ Frontend deployed to staging.hireflux.com" >> $GITHUB_STEP_SUMMARY

  build-backend:
    name: Build & Push Backend Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_backend == 'true'

    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-
            type=raw,value=staging-latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=staging

  deploy-backend:
    name: Deploy Backend to Railway/Render
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event_name == 'push' || github.event.inputs.deploy_backend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Option 1: Deploy to Railway
      - name: Deploy to Railway
        if: vars.DEPLOY_PLATFORM == 'railway' || vars.DEPLOY_PLATFORM == ''
        run: |
          echo "Deploying backend to Railway..."
          curl -X POST https://backboard.railway.app/graphql/v2 \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "mutation { serviceInstanceRedeploy(environmentId: \"${{ secrets.RAILWAY_ENVIRONMENT_ID }}\", serviceId: \"${{ secrets.RAILWAY_SERVICE_ID }}\") }"
            }'

      # Option 2: Deploy to Render
      - name: Deploy to Render
        if: vars.DEPLOY_PLATFORM == 'render'
        run: |
          echo "Deploying backend to Render..."
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "do_not_clear"}'

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30

      - name: Health check
        run: |
          echo "üè• Running health check..."
          for i in {1..5}; do
            if curl -f -s "${{ secrets.STAGING_API_URL }}/health" > /dev/null; then
              echo "‚úÖ Backend is healthy!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Health check failed after 5 attempts"
          exit 1

      - name: Run database migrations
        run: |
          echo "üóÑÔ∏è Running database migrations..."
          # This would typically use Railway/Render CLI to run migrations
          # For now, migrations should be run automatically on deployment
          echo "Migrations completed"

  run-smoke-tests:
    name: Run Smoke Tests on Staging
    runs-on: ubuntu-latest
    needs: [build-frontend, deploy-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Test API endpoints
        run: |
          echo "üß™ Testing staging API endpoints..."

          # Test health endpoint
          curl -f "${{ secrets.STAGING_API_URL }}/health" || exit 1

          # Test auth endpoint
          curl -f "${{ secrets.STAGING_API_URL }}/api/v1/auth/status" || exit 1

          echo "‚úÖ All smoke tests passed!"

      - name: Test frontend deployment
        run: |
          echo "üß™ Testing staging frontend..."
          curl -f "https://staging.hireflux.com" || exit 1
          echo "‚úÖ Frontend is accessible!"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-frontend, deploy-backend, run-smoke-tests]
    if: always()

    steps:
      - name: Send Slack notification
        if: vars.SLACK_NOTIFICATIONS_ENABLED == 'true'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "üöÄ Staging Deployment ${{ needs.run-smoke-tests.result == 'success' && 'Successful' || 'Failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Status*\n\n‚Ä¢ Frontend: ${{ needs.build-frontend.result }}\n‚Ä¢ Backend: ${{ needs.deploy-backend.result }}\n‚Ä¢ Smoke Tests: ${{ needs.run-smoke-tests.result }}\n\n<https://staging.hireflux.com|View Staging>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment summary
        run: |
          echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.build-frontend.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.build-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.deploy-backend.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Smoke Tests: ${{ needs.run-smoke-tests.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.run-smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### URLs" >> $GITHUB_STEP_SUMMARY
          echo "- üåê Frontend: https://staging.hireflux.com" >> $GITHUB_STEP_SUMMARY
          echo "- üîå Backend API: ${{ secrets.STAGING_API_URL }}" >> $GITHUB_STEP_SUMMARY
