name: Frontend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  workflow_call:

defaults:
  run:
    working-directory: frontend

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Check code formatting
        run: npm run format -- --check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-tests

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:8000' }}

      - name: Check build size
        run: |
          echo "## Build Size Report" >> $GITHUB_STEP_SUMMARY
          du -sh .next >> $GITHUB_STEP_SUMMARY

  # E2E Tests with Playwright (TDD/BDD)
  e2e-tests:
    name: E2E Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    needs: [build-check]
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        shard: [1, 2]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests (BDD scenarios)
        run: npm run test:e2e -- --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/2
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          path: frontend/playwright-report
          retention-days: 14

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: frontend/test-results
          retention-days: 7

  # Mobile Responsiveness Tests (BDD)
  mobile-e2e-tests:
    name: Mobile E2E Tests - ${{ matrix.device }}
    runs-on: ubuntu-latest
    needs: [build-check]
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        device: ['iPhone 13', 'Pixel 5', 'iPad Pro']

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run mobile E2E tests
        run: npm run test:e2e:mobile -- --project=chromium --grep="@mobile"
        env:
          CI: true
          PLAYWRIGHT_DEVICE: ${{ matrix.device }}

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results-${{ matrix.device }}
          path: frontend/test-results
          retention-days: 7

  # Lighthouse Performance Audit
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [build-check]
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: lhci autorun || echo "Lighthouse completed with warnings"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: frontend/.lighthouseci
          retention-days: 14

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for vulnerabilities
        run: |
          echo "## Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --json >> $GITHUB_STEP_SUMMARY || echo "Vulnerabilities found" >> $GITHUB_STEP_SUMMARY

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: [build-check]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run accessibility tests with axe
        run: npm run test:e2e -- --grep="@accessibility"
        continue-on-error: true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: frontend/test-results
          retention-days: 7

  frontend-summary:
    name: Frontend CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, build-check, e2e-tests, mobile-e2e-tests, security-audit, accessibility-check]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "## üöÄ Frontend CI/CD Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Core CI Checks" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Type Check: ${{ needs.lint-and-type-check.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.lint-and-type-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Check: ${{ needs.build-check.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.build-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### E2E & BDD Tests" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests (Desktop): ${{ needs.e2e-tests.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile E2E Tests: ${{ needs.mobile-e2e-tests.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.mobile-e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality & Security" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit: ${{ needs.security-audit.result == 'success' && '‚úÖ' || '‚ö†Ô∏è' }} ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility: ${{ needs.accessibility-check.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.accessibility-check.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if required checks failed
        if: |
          needs.lint-and-type-check.result != 'success' ||
          needs.unit-tests.result != 'success' ||
          needs.build-check.result != 'success' ||
          needs.e2e-tests.result != 'success'
        run: |
          echo "‚ùå One or more required CI checks failed"
          exit 1
